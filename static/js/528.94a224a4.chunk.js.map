{"version":3,"file":"static/js/528.94a224a4.chunk.js","mappings":"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","sources":["components/common/AuthInput.jsx","components/modal/MailAuthenticationModal/AuthorizationNumber.jsx","hooks/useInterval.js","hooks/useTimer.js","components/modal/MailAuthenticationModal/index.jsx","pages/Signup.jsx"],"sourcesContent":["import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { colors, fontSize } from \"styles/common\";\n\nconst Base = styled.input`\n  margin: 4px auto;\n  max-width: 600px;\n  width: 100%;\n  border-radius: 50px;\n  padding: 14px 30px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  font-size: ${fontSize.base};\n  background-color: ${colors.orange};\n  &::placeholder {\n    color: #fff;\n  }\n  &:-webkit-autofill,\n  :-webkit-autofill:hover,\n  :-webkit-autofill:focus,\n  :-webkit-autofill:active {\n    box-shadow: 0 0 0 1000px ${colors.orange} inset;\n    transition: background-color 5000s ease-in-out 0s;\n    -webkit-box-shadow: 0 0 0 1000px ${colors.orange} inset;\n    -webkit-text-fill-color: #fff;\n    -webkit-transition: background-color 5000s ease-in-out 0s;\n  }\n\n  ${({ submit }) =>\n    submit &&\n    css`\n      cursor: pointer;\n      background-color: ${colors.cyan};\n      transition: filter 0.3s;\n      &:hover {\n        filter: brightness(0.9);\n      }\n      &:disabled {\n        filter: grayscale(0.9);\n      }\n    `}\n`;\n\nconst AuthInput = ({ register, ...rest }) => {\n  return <Base {...register} {...rest} />;\n};\n\nexport default AuthInput;\n","import styled from \"@emotion/styled\";\nimport { colors, fontSize } from \"styles/common\";\n\nconst Base = styled.div`\n  position: relative;\n  margin: 20px 0;\n`;\n\nconst Input = styled.input`\n  width: 80%;\n  padding: 10px 10px;\n  font-weight: 700;\n  border: none;\n  border-bottom: 1px solid #000;\n  color: ${colors.black};\n  background-color: ${colors.beige};\n  outline: none;\n  font-size: ${fontSize.lg};\n`;\n\nconst TimeLimit = styled.span`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n  color: red;\n`;\n\nconst AuthorizationNumber = ({ timeLimit, inputRef }) => {\n  const formatTime = (time) => {\n    const min = String(parseInt(time / 60)).padStart(2, \"0\");\n    const sec = String(time % 60).padStart(2, \"0\");\n\n    return `${min}:${sec}`;\n  };\n  return (\n    <Base>\n      <Input\n        ref={inputRef}\n        title=\"인증코드\"\n        type=\"text\"\n        min={1}\n        max={6}\n        placeholder=\"인증코드\"\n      />\n      <TimeLimit>{formatTime(timeLimit)}</TimeLimit>\n    </Base>\n  );\n};\n\nexport default AuthorizationNumber;\n","import { useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import { useCallback, useState } from \"react\";\nimport useInterval from \"./useInterval\";\n\nconst useTimer = () => {\n  const [timeLimit, setTimeLimit] = useState(180);\n  const [isRunning, setIsRunning] = useState(true);\n\n  useInterval(\n    () => {\n      if (timeLimit === 1) setIsRunning(false);\n      setTimeLimit((prev) => prev - 1);\n    },\n    isRunning ? 1000 : null\n  );\n\n  const reset = useCallback(() => {\n    setTimeLimit(180);\n    setIsRunning(true);\n  }, []);\n\n  return { timeLimit, setTimeLimit, isRunning, setIsRunning, reset };\n};\n\nexport default useTimer;\n","import { GoMailRead } from \"react-icons/go\";\nimport styled from \"@emotion/styled\";\nimport { colors, fontSize } from \"styles/common\";\nimport { useRef, useEffect } from \"react\";\nimport Button from \"components/common/Button\";\nimport Modal from \"../Modal\";\nimport { useEmailMutation, useSignupMutation } from \"apis/server-api\";\nimport AuthorizationNumber from \"./AuthorizationNumber\";\nimport useTimer from \"hooks/useTimer\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"store/user\";\nimport { useNavigate } from \"react-router-dom\";\nimport { showToast } from \"lib/toast\";\n\nconst Base = styled.main`\n  padding: 40px 12px;\n`;\n\nconst Head = styled.h1`\n  font-size: ${fontSize.xl};\n  margin-bottom: 10px;\n`;\n\nconst Explanation = styled.p`\n  width: 80%;\n  margin: 0 auto;\n  word-break: keep-all;\n`;\n\nconst MailIcon = styled.div`\n  color: ${colors.black};\n  font-size: ${fontSize.xl};\n`;\n\nconst MailAuthenticationModal = ({ email, password, onClose }) => {\n  const { timeLimit, isRunning, reset } = useTimer();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const inputRef = useRef();\n  const [\n    emailTrigger,\n    {\n      data: emailRes = {},\n      isSuccess: isEmailSuccess,\n      isError: isEmailError,\n      error: emailError,\n    },\n  ] = useEmailMutation();\n  const [\n    signupTrigger,\n    {\n      data: signupRes = {},\n      isSuccess: isSignupSuccess,\n      isError: isSignupError,\n      error: signupError,\n    },\n  ] = useSignupMutation();\n\n  const handleCheckClick = () => {\n    signupTrigger({\n      email,\n      password,\n      inputNumber: inputRef.current.value,\n    });\n  };\n\n  const handleResendMailClick = () => {\n    emailTrigger({ email });\n    reset();\n  };\n\n  useEffect(() => {\n    if (isEmailSuccess) {\n      showToast(emailRes?.message);\n    }\n  }, [emailRes, isEmailSuccess]);\n\n  useEffect(() => {\n    if (isEmailError) {\n      showToast(emailError.data?.message);\n    }\n  }, [isEmailError, emailError]);\n\n  useEffect(() => {\n    if (isSignupSuccess) {\n      showToast(signupRes?.message);\n      onClose();\n      navigate(\"/\");\n      dispatch(login({ user: signupRes.user }));\n    }\n  }, [isSignupSuccess, signupRes, onClose, navigate, dispatch]);\n\n  useEffect(() => {\n    if (isSignupError) {\n      showToast(signupError.data?.message);\n    }\n  }, [isSignupError, signupError]);\n\n  return (\n    <Modal onClose={onClose}>\n      <Base>\n        <MailIcon>\n          <GoMailRead />\n        </MailIcon>\n        <Head>이메일 인증</Head>\n        <Explanation>\n          이메일 인증을 위한 코드가 <b>{email}</b>으로 전송되었습니다.\n        </Explanation>\n        <AuthorizationNumber timeLimit={timeLimit} inputRef={inputRef} />\n        {isRunning ? (\n          <Button onClick={handleCheckClick}>확인</Button>\n        ) : (\n          <Button onClick={handleResendMailClick}>인증 메일 재전송</Button>\n        )}\n      </Base>\n    </Modal>\n  );\n};\n\nexport default MailAuthenticationModal;\n","import styled from \"@emotion/styled\";\nimport { useEmailMutation } from \"apis/server-api\";\nimport Container from \"components/common/Container\";\nimport MailAuthenticationModal from \"components/modal/MailAuthenticationModal\";\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { colors, fontSize } from \"styles/common\";\nimport { showToast } from \"lib/toast\";\nimport AuthInput from \"components/common/AuthInput\";\nimport { useSelector } from \"react-redux\";\nimport { AnimatePresence } from \"framer-motion\";\nimport LogoImg from \"assets/logo.png\";\n\nconst Base = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  width: 200px;\n  margin: 40px 0 10px;\n  img {\n    width: 100%;\n  }\n`;\n\nconst Head = styled.h1`\n  font-weight: 700;\n  font-size: ${fontSize.lg};\n  color: ${colors.black};\n  margin: 10px 0;\n`;\n\nconst Form = styled.form`\n  max-width: 600px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst ToLogin = styled.span`\n  display: block;\n  margin-bottom: 10px;\n`;\n\nconst ErrorMsg = styled.p`\n  color: #da0000;\n  text-align: left;\n  padding: 0 30px;\n`;\n\nconst EMAIL_REGEX = /^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/;\n\nconst PW_REGEX = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{6,10}$/;\n\nexport const ERROR_MSG = {\n  required: \"필수정보입니다.\",\n  invalidEmail: \"이메일 형식이 아닙니다.\",\n  invalidPw: \"6~10자 영문, 숫자 조합으로 입력하세요.\",\n  invalidConfirmPw: \"비밀번호와 일치하지 않습니다.\",\n};\n\nconst Signup = () => {\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [emailTrigger, { isSuccess, isError, error }] = useEmailMutation();\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    trigger,\n    formState: { errors, isSubmitting },\n  } = useForm({ mode: \"onChange\" });\n  const { isLoggedIn } = useSelector((state) => state.user);\n  const navigate = useNavigate();\n\n  const onSubmit = async (data) => {\n    emailTrigger({ email: data.email });\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      setIsShowModal(true);\n    }\n  }, [isSuccess]);\n\n  useEffect(() => {\n    if (isError) {\n      showToast(error.data?.message);\n    }\n  }, [isError, error]);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate(\"/\");\n    }\n  }, [isLoggedIn, navigate]);\n\n  return (\n    <Container>\n      <Base>\n        <Logo>\n          <img src={LogoImg} alt=\"MOVIE ROOM 로고\" />\n        </Logo>\n        <Head>회원가입</Head>\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <AuthInput\n            type=\"email\"\n            title=\"이메일\"\n            placeholder=\"이메일\"\n            autoFocus\n            register={register(\"email\", {\n              required: ERROR_MSG.required,\n              pattern: {\n                value: EMAIL_REGEX,\n                message: ERROR_MSG.invalidEmail,\n              },\n            })}\n          />\n          {errors.email && <ErrorMsg>{errors.email.message}</ErrorMsg>}\n          <AuthInput\n            type=\"password\"\n            title=\"비밀번호\"\n            placeholder=\"비밀번호\"\n            register={register(\"pw\", {\n              required: ERROR_MSG.required,\n              pattern: {\n                value: PW_REGEX,\n                message: ERROR_MSG.invalidPw,\n              },\n              onBlur: () => trigger(\"confirmPw\"),\n            })}\n          />\n          {errors.pw && <ErrorMsg>{errors.pw.message}</ErrorMsg>}\n          <AuthInput\n            type=\"password\"\n            title=\"비밀번호 확인\"\n            placeholder=\"비밀번호 확인\"\n            register={register(\"confirmPw\", {\n              required: ERROR_MSG.required,\n              validate: {\n                confirmPw: (v) =>\n                  v === getValues(\"pw\") || ERROR_MSG.invalidConfirmPw,\n              },\n            })}\n          />\n          {errors.confirmPw && <ErrorMsg>{errors.confirmPw.message}</ErrorMsg>}\n          <AuthInput\n            submit\n            type=\"submit\"\n            title=\"회원가입\"\n            value=\"회원가입\"\n            disabled={isSubmitting}\n          />\n        </Form>\n        <Link to=\"/login\">\n          <ToLogin>로그인 하러가기</ToLogin>\n        </Link>\n        <AnimatePresence>\n          {isShowModal && (\n            <MailAuthenticationModal\n              email={getValues(\"email\")}\n              password={getValues(\"pw\")}\n              onClose={() => setIsShowModal(false)}\n            />\n          )}\n        </AnimatePresence>\n      </Base>\n    </Container>\n  );\n};\n\nexport default Signup;\n"],"names":["Base","styled","fontSize","colors","submit","css","register","rest","Input","TimeLimit","timeLimit","inputRef","ref","title","type","min","max","placeholder","time","String","parseInt","padStart","sec","formatTime","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useState","setTimeLimit","isRunning","setIsRunning","useInterval","prev","reset","useCallback","Head","Explanation","MailIcon","email","password","onClose","useTimer","dispatch","useDispatch","navigate","useNavigate","useEmailMutation","emailTrigger","data","emailRes","isEmailSuccess","isSuccess","isEmailError","isError","emailError","error","useSignupMutation","signupTrigger","signupRes","isSignupSuccess","isSignupError","signupError","showToast","message","login","user","Modal","Button","onClick","inputNumber","value","Logo","Form","ToLogin","ErrorMsg","EMAIL_REGEX","PW_REGEX","ERROR_MSG","required","invalidEmail","invalidPw","invalidConfirmPw","isShowModal","setIsShowModal","useForm","mode","handleSubmit","getValues","trigger","formState","errors","isSubmitting","isLoggedIn","useSelector","state","onSubmit","Container","src","LogoImg","alt","AuthInput","autoFocus","pattern","onBlur","pw","validate","confirmPw","v","disabled","to","AnimatePresence"],"sourceRoot":""}